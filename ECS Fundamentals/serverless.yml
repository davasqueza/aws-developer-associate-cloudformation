service: ecs-fundamentals

provider:
  name: aws
  runtime: nodejs16.x

resources:
  Resources:
    # ---------------------------------------
    # -------ECS Cluster Configuration-------
    # ---------------------------------------


    DemoCluster:
      Type: AWS::ECS::Cluster
      Properties:
        ClusterName: demo-cluster

    CapacityProviderAssociation:
      Type: AWS::ECS::ClusterCapacityProviderAssociations
      Properties:
        Cluster: !Ref DemoCluster
        CapacityProviders:
          - FARGATE
          - FARGATE_SPOT
          - !Ref ClusterASGCapacityProvider
        DefaultCapacityProviderStrategy:
          - CapacityProvider: !Ref ClusterASGCapacityProvider
            Weight: 1000

    ClusterASGCapacityProvider:
      Type: AWS::ECS::CapacityProvider
      Properties:
        Name: demo-cluster-asg-capacity-provider
        AutoScalingGroupProvider:
          AutoScalingGroupArn: !Ref ECSAutoScalingGroup
          ManagedScaling:
            Status: ENABLED

    # ---------------------------------------
    # -----------VPC Configuration-----------
    # ---------------------------------------

    ELBVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: Elastic Load Balancer VPC

    VPCInternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: Elastic Load Balancer VPC IG

    AttachGateway:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref ELBVPC
        InternetGatewayId: !Ref VPCInternetGateway

    RouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref ELBVPC
        Tags:
          - Key: Name
            Value: Elastic Load Balancer Route Table

    DefaultIpv4Route:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref RouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref VPCInternetGateway

    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref ELBVPC
        CidrBlock: 10.0.1.0/24
        MapPublicIpOnLaunch: true
        AvailabilityZone: !Select
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
        Tags:
          - Key: Name
            Value: Public Subnet 1

    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref ELBVPC
        CidrBlock: 10.0.2.0/24
        MapPublicIpOnLaunch: true
        AvailabilityZone: !Select
          - 1
          - Fn::GetAZs: !Ref 'AWS::Region'
        Tags:
          - Key: Name
            Value: Public Subnet 2

    RouteTableAssociation1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref RouteTable
        SubnetId: !Ref PublicSubnet1

    RouteTableAssociation2:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref RouteTable
        SubnetId: !Ref PublicSubnet2

    # ---------------------------------------
    # ----------- Launch template -----------
    # ---------------------------------------

    ECSLaunchConfiguration:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        ImageId: ${ssm:/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id}
        InstanceType: t2.small
        IamInstanceProfile: !Ref EC2InstanceProfile
        SecurityGroups:
          - !Ref InstanceSecurityGroup
        UserData:
          "Fn::Base64": !Sub |            
            #!/bin/bash
            yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            sudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            sudo systemctl enable amazon-ssm-agent
            sudo systemctl start amazon-ssm-agent
            yum install -y aws-cfn-bootstrap hibagent cloud-init
            /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
            /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup
            /usr/bin/enable-ec2-spot-hibernation

      Metadata:
        AWS::CloudFormation::Init:
          config:
            packages:
              yum:
                collectd: [ ]

            commands:
              01_add_instance_to_cluster:
                command: !Sub echo ECS_CLUSTER=${DemoCluster} >> /etc/ecs/ecs.config
            files:
              /etc/cfn/cfn-hup.conf:
                mode: 000400
                owner: root
                group: root
                content: !Sub |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}

              /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                content: !Sub |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
            services:
              sysvinit:
                cfn-hup:
                  enabled: true
                  ensureRunning: true
                  files:
                    - /etc/cfn/cfn-hup.conf
                    - /etc/cfn/hooks.d/cfn-auto-reloader.conf

    InstanceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Instance SG for ECS host
        VpcId: !Ref ELBVPC
        SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            FromPort: 22
            ToPort: 22
            IpProtocol: tcp

    EC2Role:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        RoleName: ECSHostRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        Policies:
          - PolicyName: ecs-service
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - ecs:PutAccountSetting
                  Resource:
                    - '*'

    EC2InstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: /
        Roles:
          - !Ref EC2Role
    # ---------------------------------------
    # -----------ASG Configuration-----------
    # ---------------------------------------

    ECSAutoScalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      DependsOn: DemoCluster
      Properties:
        LaunchConfigurationName: !Ref ECSLaunchConfiguration
        MaxSize: '3'
        MinSize: '0'
        DesiredCapacity: '0'
        HealthCheckType: 'ELB'
        HealthCheckGracePeriod: 30
        VPCZoneIdentifier:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2

    AverageCPUScalePolicy:
      Type: AWS::AutoScaling::ScalingPolicy
      Properties:
        AutoScalingGroupName: !Ref ECSAutoScalingGroup
        PolicyType: 'TargetTrackingScaling'
        TargetTrackingConfiguration:
          PredefinedMetricSpecification:
            PredefinedMetricType: 'ASGAverageCPUUtilization'
          TargetValue: 40
        EstimatedInstanceWarmup: 300

    # ---------------------------------------
    # -----------ELB Configuration-----------
    # ---------------------------------------

    LoadBalancerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Load Balancer SG for HTTP access
        VpcId: !Ref ELBVPC
        SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            FromPort: 80
            ToPort: 80
            IpProtocol: tcp

    VPCLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: MyFirstALB
        Type: application
        Scheme: "internet-facing"
        SecurityGroups:
          - !Ref LoadBalancerSecurityGroup
        Subnets:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2

    TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: MyTargets
        TargetType: ip
        VpcId: !Ref ELBVPC
        Port: 80
        Protocol: HTTP
        ProtocolVersion: HTTP1
        HealthCheckEnabled: true
        HealthCheckProtocol: HTTP
        HealthCheckPath: "/"

    LoadBalancerListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - TargetGroupArn: !GetAtt TargetGroup.TargetGroupArn
            Type: forward
        LoadBalancerArn: !Ref VPCLoadBalancer
        Port: 80
        Protocol: HTTP

    # ---------------------------------------
    # ----------ECS task definition----------
    # ---------------------------------------

    NginxTaskDefinition:
      Type: AWS::ECS::TaskDefinition
      Properties:
        Family: 'nginxdemos-hello'
        ContainerDefinitions:
          - Name: 'nginxdemos-hello'
            Image: 'nginxdemos/hello'
            PortMappings:
              - AppProtocol: http
                ContainerPort: 80
                HostPort: 80
        RequiresCompatibilities:
          - EC2
          - FARGATE
        RuntimePlatform:
          CpuArchitecture: X86_64
          OperatingSystemFamily: LINUX
        Cpu: '512'
        Memory: '1024'
        # TaskRoleArn:
        ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
        NetworkMode: awsvpc

    ECSTaskExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: 'ecs-tasks.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
              Condition:
                ArnLike:
                  aws:SourceArn: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:*
                StringEquals:
                  aws:SourceAccount: !Ref AWS::AccountId
        Path: /
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

    NginxTaskSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SG for Nginx task
        VpcId: !Ref ELBVPC
        SecurityGroupIngress:
          - SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
            IpProtocol: '-1'
            Description: Allow traffic from ALB

    # ---------------------------------------
    # ----------ECS service deploy-----------
    # ---------------------------------------

    NginxService:
      Type: AWS::ECS::Service
      DependsOn: LoadBalancerListener
      Properties:
        ServiceName: nginxdemos
        Cluster: !Ref DemoCluster
        LaunchType: EC2
        TaskDefinition: !Ref NginxTaskDefinition
        DesiredCount: 1
        LoadBalancers:
          - ContainerName: 'nginxdemos-hello'
            ContainerPort: 80
            TargetGroupArn: !Ref TargetGroup
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: ENABLED
            SecurityGroups:
              - !Ref NginxTaskSecurityGroup
            Subnets:
              - !Ref PublicSubnet1
              - !Ref PublicSubnet2
