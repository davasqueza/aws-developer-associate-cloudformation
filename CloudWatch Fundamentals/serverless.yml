service: cloudwatch-fundamentals

provider:
  name: aws
  runtime: nodejs16.x

resources:
  Resources:
    # ---------------------------------------
    # -----------VPC Configuration-----------
    # ---------------------------------------

    MyFirstVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 172.31.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: default

    RouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MyFirstVPC

    PublicSubnet:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MyFirstVPC
        CidrBlock: 172.31.0.0/20
        MapPublicIpOnLaunch: true

    RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref RouteTable
        SubnetId: !Ref PublicSubnet

    VPCInternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: VPC IG

    AttachGateway:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref MyFirstVPC
        InternetGatewayId: !Ref VPCInternetGateway

    DefaultIpv4Route:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref RouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref VPCInternetGateway

    InstanceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Instance SG for SSH access
        VpcId: !Ref MyFirstVPC
        SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            FromPort: 22
            ToPort: 22
            IpProtocol: tcp

    InstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        InstanceProfileName: ec2-instance-profile
        Roles:
          - !Ref EC2InstanceRole

    EC2InstanceRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ec2-instance-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - sts:AssumeRole

    EC2KeyPair:
      Type: AWS::EC2::KeyPair
      Properties:
        KeyName: EC2KeyPair

    EC2Instance:
      Type: AWS::EC2::Instance
      Properties:
        ImageId: ami-051f8a213df8bc089
        KeyName: !Ref EC2KeyPair
        InstanceType: t2.micro
        UserData: !Base64 ${file(ec2-user-data.sh)}
        IamInstanceProfile: !Ref InstanceProfile
        SubnetId: !Ref PublicSubnet
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        Tags:
          - Key: Name
            Value: EC2 Instance

    # ---------------------------------------
    # -------CloudWatch Configuration--------
    # ---------------------------------------

    CloudWatchSetAlarmPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: ReadonlyAdminPolicy
        Roles:
          - !Ref EC2InstanceRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cloudwatch:SetAlarmState
              Resource:
                - '*'

    HighCPUAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: HighCPUAlarm
        AlarmDescription: CPU alarm for my instance
        # https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_PutMetricAlarm.html#API_PutMetricAlarm_RequestParameters
        AlarmActions:
          - !Sub 'arn:aws:automate:${AWS::Region}:ec2:stop'
        # https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html
        Namespace: 'AWS/EC2'
        MetricName: CPUUtilization
        Statistic: Average
        Period: 300 # 5 minutes
        EvaluationPeriods: 3
        Threshold: 95
        ComparisonOperator: GreaterThanThreshold
        Dimensions:
          - Name: InstanceId
            Value: !Ref EC2Instance
