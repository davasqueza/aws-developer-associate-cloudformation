service: asg-fundamentals

provider:
  name: aws
  runtime: nodejs16.x

resources:
  Resources:
    # ---------------------------------------
    # -----------VPC Configuration-----------
    # ---------------------------------------

    ELBVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: Elastic Load Balancer VPC

    VPCInternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: Elastic Load Balancer VPC IG

    AttachGateway:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref ELBVPC
        InternetGatewayId: !Ref VPCInternetGateway

    RouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref ELBVPC
        Tags:
          - Key: Name
            Value: Elastic Load Balancer Route Table

    DefaultIpv4Route:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref RouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref VPCInternetGateway

    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref ELBVPC
        CidrBlock: 10.0.1.0/24
        MapPublicIpOnLaunch: true
        AvailabilityZone: !Select
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
        Tags:
          - Key: Name
            Value: Public Subnet 1

    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref ELBVPC
        CidrBlock: 10.0.2.0/24
        MapPublicIpOnLaunch: true
        AvailabilityZone: !Select
          - 1
          - Fn::GetAZs: !Ref 'AWS::Region'
        Tags:
          - Key: Name
            Value: Public Subnet 2

    RouteTableAssociation1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref RouteTable
        SubnetId: !Ref PublicSubnet1

    RouteTableAssociation2:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref RouteTable
        SubnetId: !Ref PublicSubnet2

    InstanceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Instance SG for HTTP and SSH access
        VpcId: !Ref ELBVPC
        SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            FromPort: 22
            ToPort: 22
            IpProtocol: tcp
          - SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
            FromPort: 80
            ToPort: 80
            IpProtocol: tcp

    # ---------------------------------------
    # -----------ELB Configuration-----------
    # ---------------------------------------


    LoadBalancerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Load Balancer SG for HTTP access
        VpcId: !Ref ELBVPC
        SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            FromPort: 80
            ToPort: 80
            IpProtocol: tcp

    VPCLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: MyFirstALB
        Type: application
        Scheme: "internet-facing"
        SecurityGroups:
          - !Ref LoadBalancerSecurityGroup
        Subnets:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2

    TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        Name: MyTargets
        TargetType: instance
        VpcId: !Ref ELBVPC
        Port: 80
        Protocol: HTTP
        ProtocolVersion: HTTP1
        HealthCheckEnabled: true
        HealthCheckProtocol: HTTP
        HealthCheckPath: "/"

    LoadBalancerListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - TargetGroupArn: !GetAtt TargetGroup.TargetGroupArn
            Type: forward
        LoadBalancerArn: !Ref VPCLoadBalancer
        Port: 80
        Protocol: HTTP

    # ---------------------------------------
    # ----------- Launch template -----------
    # ---------------------------------------

    BasicWebServerTemplate:
      Type: AWS::EC2::LaunchTemplate
      Properties:
        LaunchTemplateName: 'web-server-template'
        LaunchTemplateData:
          ImageId: ami-00c6177f250e07ec1
          KeyName: "EC2 Tutorial"
          InstanceType: t2.micro
          UserData: !Base64 ${file(ec2-user-data.sh)}
          SecurityGroupIds:
            - !Ref InstanceSecurityGroup

    # ---------------------------------------
    # -----------ASG Configuration-----------
    # ---------------------------------------

    BasicASG:
      Type: AWS::AutoScaling::AutoScalingGroup
      DependsOn: VPCInternetGateway
      Properties:
        LaunchTemplate:
          LaunchTemplateId: !Ref BasicWebServerTemplate
          Version: !GetAtt BasicWebServerTemplate.LatestVersionNumber
        MaxSize: '3'
        MinSize: '1'
        DesiredCapacity: '1'
        HealthCheckType: 'ELB'
        HealthCheckGracePeriod: 30
        TargetGroupARNs:
          - !Ref TargetGroup
        VPCZoneIdentifier:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2

    AverageCPUScalePolicy:
      Type: AWS::AutoScaling::ScalingPolicy
      Properties:
        AutoScalingGroupName: !Ref BasicASG
        PolicyType: 'TargetTrackingScaling'
        TargetTrackingConfiguration:
          PredefinedMetricSpecification:
            PredefinedMetricType: 'ASGAverageCPUUtilization'
          TargetValue: 40
        EstimatedInstanceWarmup: 300
