service: asg-fundamentals

provider:
  name: aws
  runtime: nodejs16.x

resources:
  Resources:
    # ---------------------------------------
    # -----------VPC Configuration-----------
    # ---------------------------------------

    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: Elastic Load Balancer VPC

    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: VPC IG

    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC

    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 0, !GetAZs '' ]
        CidrBlock: 10.0.1.0/24
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: Public Subnet (AZ1)

    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 1, !GetAZs '' ]
        CidrBlock: 10.0.2.0/24
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: Public Subnet (AZ2)

    PublicSubnet3:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref VPC
        AvailabilityZone: !Select [ 2, !GetAZs '' ]
        CidrBlock: 10.0.3.0/24
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: Public Subnet (AZ3)

    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: Public Routes

    DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet2

    PublicSubnet3RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref PublicSubnet3

    WebServerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow SSH and HTTP
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: Allow SSH HTTP

    # ---------------------------------------
    # ----------- Launch template -----------
    # ---------------------------------------

    BasicWebServerTemplate:
      Type: AWS::EC2::LaunchTemplate
      Properties:
        LaunchTemplateName: AutoScaling
        LaunchTemplateData:
          ImageId: ami-04823729c75214919
          InstanceType: t2.micro
          NetworkInterfaces:
            - DeviceIndex: 0
              AssociatePublicIpAddress: true
              Groups:
                - !Ref WebServerSecurityGroup
          UserData: !Base64 ${file(ec2-user-data.sh)}

    # ---------------------------------------
    # -----------ASG Configuration-----------
    # ---------------------------------------

    AutoScalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      DependsOn: InternetGatewayAttachment
      Properties:
        MinSize: '2'
        MaxSize: '5'
        DesiredCapacity: '3'
        LaunchTemplate:
          LaunchTemplateId: !Ref BasicWebServerTemplate
          Version: !GetAtt BasicWebServerTemplate.LatestVersionNumber
        HealthCheckType: ELB
        VPCZoneIdentifier:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PublicSubnet3
        TargetGroupARNs:
          - !Ref ALBTargetGroups

    cpuUsage:
      Type: AWS::AutoScaling::ScalingPolicy
      Properties:
        AutoScalingGroupName: !Ref AutoScalingGroup
        PolicyType: TargetTrackingScaling
        TargetTrackingConfiguration:
          PredefinedMetricSpecification:
            PredefinedMetricType: ASGAverageCPUUtilization
          TargetValue: 50

    ScalingPolicy:
      Type: AWS::AutoScaling::ScalingPolicy
      Properties:
        AdjustmentType: ChangeInCapacity
        AutoScalingGroupName: !Ref AutoScalingGroup
        ScalingAdjustment: 1

    # ---------------------------------------
    # -----------ELB Configuration-----------
    # ---------------------------------------

    ALBTargetGroups:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        VpcId: !Ref VPC
        TargetType: instance
        HealthCheckPath: /index.html
        Port: 80
        Protocol: HTTP

    ALB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      DependsOn: InternetGatewayAttachment
      Properties:
        Type: application
        Scheme: internet-facing
        SecurityGroups:
          - !Ref WebServerSecurityGroup
        Subnets:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PublicSubnet3
        Tags:
          - Key: Name
            Value: CloudFormationALB

    ALBlistener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        Protocol: HTTP
        Port: 80
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref ALBTargetGroups
        LoadBalancerArn: !Ref ALB
